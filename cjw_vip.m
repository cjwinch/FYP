function [ vip ] = cjw_vip( X, Y, model )
%CJW_PLSCV Function to perform PLS cross-validation on a given input.
%
% Synopsis:
%  [ vip ] = cjw_pls_vip( X, Y, model )
%
% Description:
%  Calculate VIP for a Partial Least Squares model calculated for a given 
%  independent block (X) and a given dependent block (Y).
%
%
% Inputs:
%  X     (matrix)    (n x m)   Matrix of independant variables.
%                              Each row of X is a sample.
%                              Each column of X is a variable.
%
%  Y     (matrix)    (n x p)   Matrix of dependant variables.
%                              Each row of Y is a sample.
%                              Each column of Y is a variable.
%  
%  model             (struct)  PLS model generated by cjw_pls
%
% Outputs:
%  VIP    (vector)   (p)       VIP for each of the p predictor variables.  
%
% Examples: 
%  [ vip ] = cjw_vip( X, Y, my_model )
%
% Requirements:
%  None
% 
% Author:
%  Chris Winchurch <cjw111(at)imperial.ac.uk>
%
% License:
%  The program is free for non-commercial academic use. Please 
%  contact the authors if you are interested in using the software
%  for commercial purposes. The software must not modified or
%  re-distributed without prior permission of the author.
%

[m,p]=size(X);
[m,h]=size([model.t]);


vip = [];
for j=1:p
    vipsum1 = 0;
    vipsum2 = 0;
    for a=1:h
        vipsum1 = vipsum1 + ((model(a).q'*model(a).q)*(model(a).t)'*(model(a).t))*((model(a).w(j)/norm(model(a).w)).^2);
        vipsum2 = vipsum2 + ((model(a).q'*model(a).q)*(model(a).t)'*(model(a).t));
    end
    vip(j) = sqrt((p*vipsum1)/vipsum2);
end

end
